// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kNn551YTznMMb4YQ5Km9SL
// Component: GmqYdgPERd4
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Button from "../../Button"; // plasmic-import: 7xNG3XR7jCb/component

import { useScreenVariants as useScreenVariantstMxE3T6K3HVTc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: tMxE3T6K3hVTc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_paperstudios.module.css"; // plasmic-import: kNn551YTznMMb4YQ5Km9SL/projectcss
import sty from "./PlasmicMoneyRush.module.css"; // plasmic-import: GmqYdgPERd4/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: iG22nYJYy3C/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 45mhSrhfGtS/icon
import DownloadIcon143099SvgIcon from "./icons/PlasmicIcon__DownloadIcon143099Svg"; // plasmic-import: -1dlLAmHP/icon

export type PlasmicMoneyRush__VariantMembers = {};

export type PlasmicMoneyRush__VariantsArgs = {};
type VariantPropType = keyof PlasmicMoneyRush__VariantsArgs;
export const PlasmicMoneyRush__VariantProps = new Array<VariantPropType>();

export type PlasmicMoneyRush__ArgsType = {};
type ArgPropType = keyof PlasmicMoneyRush__ArgsType;
export const PlasmicMoneyRush__ArgProps = new Array<ArgPropType>();

export type PlasmicMoneyRush__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultMoneyRushProps {}

function PlasmicMoneyRush__RenderFunc(props: {
  variants: PlasmicMoneyRush__VariantsArgs;
  args: PlasmicMoneyRush__ArgsType;
  overrides: PlasmicMoneyRush__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantstMxE3T6K3HVTc()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />

        <title key="title">{"MONEY RUSH"}</title>

        <meta key="og:title" property="og:title" content={"MONEY RUSH"} />

        <meta key="twitter:title" name="twitter:title" content={"MONEY RUSH"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <Reveal
            className={classNames("__wab_instance", sty.reveal___6Rv6D)}
            triggerOnce={true}
          >
            <Button
              className={classNames("__wab_instance", sty.button__wveTe)}
              color={"blue" as const}
              link={"/" as const}
              shape={"rounded" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kDnOi
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "PAPERSTUDIOS"
                  : "PAPERSTUDIOS"}
              </div>
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__fjmjM)}
              color={"green" as const}
              link={"" as const}
              shape={"rounded" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ernc9
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "MONEY RUSH\nSPIEL [APK]"
                  : "MONEY RUSH\nSPIEL [APK]"}
              </div>
            </Button>
          </Reveal>

          <Reveal
            className={classNames("__wab_instance", sty.reveal__sryEm)}
            triggerOnce={true}
          >
            <Button
              className={classNames("__wab_instance", sty.button__pj4O1)}
              color={"blue" as const}
              link={
                "https://www.dropbox.com/s/8e4dheqk2maznom/MONEY%20RUSH.APK?dl=1" as const
              }
              shape={"rounded" as const}
              showStartIcon={true}
              startIcon={
                <DownloadIcon143099SvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xrBSe
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "DOWNLOAD"
                  : "DOWNLOAD"}
              </div>
            </Button>
          </Reveal>

          <Reveal
            className={classNames("__wab_instance", sty.reveal__rc6O9)}
            triggerOnce={true}
          >
            <Button
              className={classNames("__wab_instance", sty.button__dVjwa)}
              color={"blue" as const}
              shape={"rounded" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eyt69
                )}
              >
                {"28.7 MB"}
              </div>
            </Button>
          </Reveal>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMoneyRush__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMoneyRush__VariantsArgs;
    args?: PlasmicMoneyRush__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMoneyRush__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMoneyRush__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMoneyRush__ArgProps,
          internalVariantPropNames: PlasmicMoneyRush__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMoneyRush__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMoneyRush";
  } else {
    func.displayName = `PlasmicMoneyRush.${nodeName}`;
  }
  return func;
}

export const PlasmicMoneyRush = Object.assign(
  // Top-level PlasmicMoneyRush renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicMoneyRush
    internalVariantProps: PlasmicMoneyRush__VariantProps,
    internalArgProps: PlasmicMoneyRush__ArgProps
  }
);

export default PlasmicMoneyRush;
/* prettier-ignore-end */
