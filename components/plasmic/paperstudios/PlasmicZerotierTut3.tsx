// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kNn551YTznMMb4YQ5Km9SL
// Component: cRYxED96e4
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 7xNG3XR7jCb/component

import { useScreenVariants as useScreenVariantstMxE3T6K3HVTc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: tMxE3T6K3hVTc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_paperstudios.module.css"; // plasmic-import: kNn551YTznMMb4YQ5Km9SL/projectcss
import sty from "./PlasmicZerotierTut3.module.css"; // plasmic-import: cRYxED96e4/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: iG22nYJYy3C/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 45mhSrhfGtS/icon

export type PlasmicZerotierTut3__VariantMembers = {};

export type PlasmicZerotierTut3__VariantsArgs = {};
type VariantPropType = keyof PlasmicZerotierTut3__VariantsArgs;
export const PlasmicZerotierTut3__VariantProps = new Array<VariantPropType>();

export type PlasmicZerotierTut3__ArgsType = {};
type ArgPropType = keyof PlasmicZerotierTut3__ArgsType;
export const PlasmicZerotierTut3__ArgProps = new Array<ArgPropType>();

export type PlasmicZerotierTut3__OverridesType = {
  root?: p.Flex<"div">;
  googleDrive?: p.Flex<typeof Button>;
  h2?: p.Flex<"h2">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  titletext3?: p.Flex<"h1">;
  titletext2?: p.Flex<"h1">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultZerotierTut3Props {}

function PlasmicZerotierTut3__RenderFunc(props: {
  variants: PlasmicZerotierTut3__VariantsArgs;
  args: PlasmicZerotierTut3__ArgsType;
  overrides: PlasmicZerotierTut3__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantstMxE3T6K3HVTc()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />

        <title key="title">{"ZEROTIER TUTORIAL"}</title>

        <meta
          key="og:title"
          property="og:title"
          content={"ZEROTIER TUTORIAL"}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={"ZEROTIER TUTORIAL"}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <Button
            data-plasmic-name={"googleDrive"}
            data-plasmic-override={overrides.googleDrive}
            className={classNames("__wab_instance", sty.googleDrive)}
            color={"blue" as const}
            link={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("/" as const)
                : ("/" as const)
            }
            shape={"rounded" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eDac6
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "OK"
                        : "OK"}
                    </h2>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              ) : (
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "OK"
                        : "OK"}
                    </h2>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              )}
            </div>
          </Button>

          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("/" as const)
                : ("/" as const)
            }
            platform={"nextjs"}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <h1
                data-plasmic-name={"titletext3"}
                data-plasmic-override={overrides.titletext3}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.titletext3
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "PAPERSTUDIOS"
                  : "PAPERSTUDIOS"}
              </h1>
            ) : null}

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <h1
                data-plasmic-name={"titletext2"}
                data-plasmic-override={overrides.titletext2}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.titletext2
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "PAPERSTUDIOS"
                  : "PAPERSTUDIOS"}
              </h1>
            ) : null}
          </p.PlasmicLink>

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sXsjR
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                "Dieses Programm funktioniert nur richtig auf Windows"
              ) : (
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 900 }}
                  >
                    {
                      "Unten bei Join Network geb gleich folgenden Code ein, dann solltest du Fertig Sein!"
                    }
                  </span>
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              )}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zDSA
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"af415e486f2416f3"}
                </span>
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rXd6S
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 900 }}
              >
                {"3."}
              </span>
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "googleDrive",
    "h2",
    "link",
    "titletext3",
    "titletext2",
    "freeBox"
  ],
  googleDrive: ["googleDrive", "h2"],
  h2: ["h2"],
  link: ["link", "titletext3", "titletext2"],
  titletext3: ["titletext3"],
  titletext2: ["titletext2"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  googleDrive: typeof Button;
  h2: "h2";
  link: "a";
  titletext3: "h1";
  titletext2: "h1";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicZerotierTut3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicZerotierTut3__VariantsArgs;
    args?: PlasmicZerotierTut3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicZerotierTut3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicZerotierTut3__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicZerotierTut3__ArgProps,
          internalVariantPropNames: PlasmicZerotierTut3__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicZerotierTut3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicZerotierTut3";
  } else {
    func.displayName = `PlasmicZerotierTut3.${nodeName}`;
  }
  return func;
}

export const PlasmicZerotierTut3 = Object.assign(
  // Top-level PlasmicZerotierTut3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    googleDrive: makeNodeComponent("googleDrive"),
    h2: makeNodeComponent("h2"),
    link: makeNodeComponent("link"),
    titletext3: makeNodeComponent("titletext3"),
    titletext2: makeNodeComponent("titletext2"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicZerotierTut3
    internalVariantProps: PlasmicZerotierTut3__VariantProps,
    internalArgProps: PlasmicZerotierTut3__ArgProps
  }
);

export default PlasmicZerotierTut3;
/* prettier-ignore-end */
