// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kNn551YTznMMb4YQ5Km9SL
// Component: M4wE8V6tAL
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 7xNG3XR7jCb/component

import { useScreenVariants as useScreenVariantstMxE3T6K3HVTc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: tMxE3T6K3hVTc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_paperstudios.module.css"; // plasmic-import: kNn551YTznMMb4YQ5Km9SL/projectcss
import sty from "./PlasmicZerotierTut1.module.css"; // plasmic-import: M4wE8V6tAL/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: iG22nYJYy3C/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 45mhSrhfGtS/icon

export type PlasmicZerotierTut1__VariantMembers = {};

export type PlasmicZerotierTut1__VariantsArgs = {};
type VariantPropType = keyof PlasmicZerotierTut1__VariantsArgs;
export const PlasmicZerotierTut1__VariantProps = new Array<VariantPropType>();

export type PlasmicZerotierTut1__ArgsType = {};
type ArgPropType = keyof PlasmicZerotierTut1__ArgsType;
export const PlasmicZerotierTut1__ArgProps = new Array<ArgPropType>();

export type PlasmicZerotierTut1__OverridesType = {
  root?: p.Flex<"div">;
  titletext3?: p.Flex<"h1">;
  titletext2?: p.Flex<"h1">;
  freeBox?: p.Flex<"div">;
  googleDrive?: p.Flex<typeof Button>;
  download?: p.Flex<typeof Button>;
};

export interface DefaultZerotierTut1Props {}

function PlasmicZerotierTut1__RenderFunc(props: {
  variants: PlasmicZerotierTut1__VariantsArgs;
  args: PlasmicZerotierTut1__ArgsType;
  overrides: PlasmicZerotierTut1__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantstMxE3T6K3HVTc()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />

        <title key="title">{"ZEROTIER TUTORIAL"}</title>

        <meta
          key="og:title"
          property="og:title"
          content={"ZEROTIER TUTORIAL"}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={"ZEROTIER TUTORIAL"}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <p.PlasmicLink
            className={classNames(projectcss.all, projectcss.a, sty.link__k37R)}
            component={Link}
            href={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("/" as const)
                : ("/" as const)
            }
            platform={"nextjs"}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <h1
                data-plasmic-name={"titletext3"}
                data-plasmic-override={overrides.titletext3}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.titletext3
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "PAPERSTUDIOS"
                  : "PAPERSTUDIOS"}
              </h1>
            ) : null}

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <h1
                data-plasmic-name={"titletext2"}
                data-plasmic-override={overrides.titletext2}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.titletext2
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "PAPERSTUDIOS"
                  : "PAPERSTUDIOS"}
              </h1>
            ) : null}
          </p.PlasmicLink>

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__faltK
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 900 }}
                >
                  {"1."}
                </span>
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>

            <Button
              data-plasmic-name={"googleDrive"}
              data-plasmic-override={overrides.googleDrive}
              className={classNames("__wab_instance", sty.googleDrive)}
              color={"blue" as const}
              link={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("/ZROTIER-gdiwz24-2" as const)
                  : ("/ZROTIER-gdiwz24-2" as const)
              }
              shape={"rounded" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tj10U
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__gnfFe
                      )}
                    >
                      {"NÃ„CHSTES"}
                    </h2>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            </Button>
          </div>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__zk414
            )}
            component={Link}
            href={"https://www.zerotier.com/download/" as const}
            platform={"nextjs"}
            target={"_blank" as const}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <Button
                data-plasmic-name={"download"}
                data-plasmic-override={overrides.download}
                className={classNames("__wab_instance", sty.download)}
                color={"blue" as const}
                link={"" as const}
                shape={"rounded" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dmoHd
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__jxr0E
                        )}
                      >
                        {"DOWNLOAD"}
                      </h2>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              </Button>
            ) : null}
          </p.PlasmicLink>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "titletext3",
    "titletext2",
    "freeBox",
    "googleDrive",
    "download"
  ],
  titletext3: ["titletext3"],
  titletext2: ["titletext2"],
  freeBox: ["freeBox", "googleDrive"],
  googleDrive: ["googleDrive"],
  download: ["download"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  titletext3: "h1";
  titletext2: "h1";
  freeBox: "div";
  googleDrive: typeof Button;
  download: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicZerotierTut1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicZerotierTut1__VariantsArgs;
    args?: PlasmicZerotierTut1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicZerotierTut1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicZerotierTut1__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicZerotierTut1__ArgProps,
          internalVariantPropNames: PlasmicZerotierTut1__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicZerotierTut1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicZerotierTut1";
  } else {
    func.displayName = `PlasmicZerotierTut1.${nodeName}`;
  }
  return func;
}

export const PlasmicZerotierTut1 = Object.assign(
  // Top-level PlasmicZerotierTut1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    titletext3: makeNodeComponent("titletext3"),
    titletext2: makeNodeComponent("titletext2"),
    freeBox: makeNodeComponent("freeBox"),
    googleDrive: makeNodeComponent("googleDrive"),
    download: makeNodeComponent("download"),

    // Metadata about props expected for PlasmicZerotierTut1
    internalVariantProps: PlasmicZerotierTut1__VariantProps,
    internalArgProps: PlasmicZerotierTut1__ArgProps
  }
);

export default PlasmicZerotierTut1;
/* prettier-ignore-end */
